
R version 3.2.3 Patched (2016-01-03 r69846) -- "Wooden Christmas-Tree"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "coenocliner"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('coenocliner')
This is coenocliner 0.2-1
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("coenocline")
> ### * coenocline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coenocline
> ### Title: Simulate species abundance (counts) or occurrence along one or
> ###   two gradients
> ### Aliases: coenocline
> ### Keywords: datagen
> 
> ### ** Examples
> 
> 
> ## Poisson counts along a single gradient, Gaussian response
> ## =========================================================
> 
> x <- seq(from = 4, to = 6, length = 100)
> opt <- c(3.75, 4, 4.55, 5, 5.5) + 0.5
> tol <- rep(0.25, 5)
> h <- rep(20, 5)
> 
> ## simulate
> set.seed(1)
> y <- coenocline(x, responseModel = "gaussian",
+                 params = cbind(opt = opt, tol = tol, h = h),
+                 countModel = "poisson")
> head(y)
     [,1] [,2] [,3] [,4] [,5]
[1,]    9    3    0    0    0
[2,]   17    8    0    0    0
[3,]   18    4    0    0    0
[4,]   16    5    0    0    0
[5,]   21    5    0    0    0
[6,]   19    4    0    0    0
> 
> y <- coenocline(x, responseModel = "gaussian",
+                 params = cbind(opt = opt, tol = tol, h = h),
+                 countModel = "poisson",
+                 expectation = TRUE)
> plot(y, type = "l", lty = "solid")
> 
> ## Bernoulli distribution (occurrence)
> ## ===================================
> 
> h <- c(1,3,5,7,9) / 10
> y <- coenocline(x, responseModel = "gaussian",
+                 params = cbind(opt = opt, tol = tol, h = h),
+                 countModel = "bernoulli")
> head(y)
     [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]    0    1    0    0    0
[3,]    0    0    0    0    0
[4,]    0    0    0    0    0
[5,]    0    0    0    0    0
[6,]    0    0    0    0    0
> ## probability of occurrence...
> pi <- coenocline(x, responseModel = "gaussian",
+                  params = cbind(opt = opt, tol = tol, h = h),
+                  countModel = "bernoulli", expectation = TRUE)
> ## plot
> plot(y, type = "p", pch = 1) # a random realisation
> lines(pi, lty = "solid")     # probability of occurrence
> 
> ## Correlated bivariate Gaussian response, two species
> ## ===================================================
> 
> ## gradient locations
> x <- seq(3.5, 7, length = 30)
> y <- seq(1, 10, length = 30)
> xy <- expand.grid(x = x, y = y)
> 
> ## species parameters on gradients x and y
> parx <- list(opt = c(5,6), tol = c(0.5,0.3), h = c(50, 75))
> pary <- list(opt = c(5,7), tol = c(1.5, 1.5))
> 
> ## evaluate response curves at gradient locations
> sim <- coenocline(xy, params = list(px = parx, py = pary),
+                   responseModel = "gaussian", expectation = TRUE,
+                   extraParams = list(corr = 0.5))
> 
> ## Perspective plots the bivariate responses of the two species
> ## 'sim' is a matrix 1 column per species with prod(length(x), length(y))
> ## rows. Need to reshape each species (column) vector into a matrix
> ## with as many rows as length(x) (number of gradient locations) and
> ## fill *column*-wise (the default)
> persp(x, y, matrix(sim[,1], ncol = length(x)), # spp1
+       theta = 45, phi = 30)
> persp(x, y, matrix(sim[,2], ncol = length(x)), # spp2
+       theta = 45, phi = 30)
> 
> ## Poisson counts along two correlated gradients, Gaussian response
> ## ================================================================
> 
> set.seed(1)
> N <-  100
> x1 <- seq(from = 4, to = 6, length = N)
> opt1 <- seq(4, 6, length = 5)
> tol1 <- rep(0.25, 5)
> x2 <- seq(from = 2, to = 20, length = N)
> opt2 <- seq(2, 20, length = 5)
> tol2 <- rep(1, 5)
> h <- rep(30, 5)
> xy <- expand.grid(x = x1, y = x2)
> 
> set.seed(1)
> params <- list(px = list(opt = opt1, tol = tol1, h = h),
+                py = list(opt = opt2, tol = tol2))
> y <- coenocline(xy,
+                 responseModel = "gaussian",
+                 params = params,
+                 extraParams = list(corr = 0.5),
+                 countModel = "poisson")
> 
> head(y)
     [,1] [,2] [,3] [,4] [,5]
[1,]   26    0    0    0    0
[2,]   37    0    0    0    0
[3,]   36    0    0    0    0
[4,]   31    0    0    0    0
[5,]   19    0    0    0    0
[6,]   29    0    0    0    0
> tail(y)
         [,1] [,2] [,3] [,4] [,5]
[9995,]     0    0    0    0   30
[9996,]     0    0    0    0   32
[9997,]     0    0    0    0   35
[9998,]     0    0    0    0   34
[9999,]     0    0    0    0   27
[10000,]    0    0    0    0   33
> 
> ## Visualise one species' bivariate count data
> persp(x1, x2, matrix(y[,3], ncol = length(x1)),
+       ticktype = "detailed", zlab = "Abundance")
> 
> ## Recreate beta responses in Fig. 2 of Minchin (1987)
> ## ===================================================
> 
> A0 <- c(5,4,7,5,9,8) * 10
> m <- c(25,85,10,60,45,60)
> r <- c(3,3,4,4,6,5) * 10
> alpha <- c(0.1,1,2,4,1.5,1)
> gamma <- c(0.1,1,2,4,0.5,4)
> x <- 1:100
> params <- list(m = m, A0 = A0, r = r, alpha = alpha, gamma = gamma)
> 
> ## Expectations
> set.seed(2)
> y <- coenocline(x, responseModel = "beta",
+                 params = params,
+                 countModel = "poisson")
> head(y)
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    0    0   40    0    0    0
[2,]    0    0   48    0    5    0
[3,]    0    0   57    0    3    0
[4,]    0    0   57    0    5    0
[5,]    0    0   54    0    8    0
[6,]    0    0   62    0    7    0
> plot(y, type = "l", lty = "solid")
> 
> y <- coenocline(x, responseModel = "beta",
+                 params = params,
+                 countModel = "poisson", expectation = TRUE)
> plot(y, type = "l", lty = "solid")
> 
> ## Zero-inflated Poisson, constant zero-inflation
> ## ==============================================
> 
> y <- coenocline(x, responseModel = "beta", params = params,
+                 countModel = "ZIP", countParams = list(zprobs = 0.2))
> plot(y, type = "l", lty = "solid")
> 
> ## Zero-inflated Negative binomial, constant zero-inflation
> y <- coenocline(x, responseModel = "beta",
+                 params = params,
+                 countModel = "ZINB",
+                 countParams = list(alpha = 0.75, zprobs = 0.2))
> plot(y, type = "l", lty = "solid")
> 
> ## Binomial counts, constant size (m) of 100
> ## =========================================
> 
> ## note: A0 must be in range, (0,1)
> params[["A0"]] <- c(5,4,7,5,9,8) / 10
> y <- coenocline(x, responseModel = "beta",
+                 params = params,
+                 countModel = "binomial",
+                 countParams = list(size = 100))
> plot(y, type = "l", lty = "solid")
> 
> ## Beta-Binomial counts, constant size (m) of 100
> ## ==============================================
> 
> ## note: A0 must be in range, (0,1)
> params[["A0"]] <- c(5,4,7,5,9,8) / 10
> y <- coenocline(x, responseModel = "beta",
+                 params = params,
+                 countModel = "betabinomial",
+                 countParams = list(size = 100, theta = 0.1))
> plot(y, type = "l", lty = "solid")
> 
> 
> 
> cleanEx()
> nameEx("coenocliner-internal")
> ### * coenocliner-internal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prettyHead
> ### Title: Pretty Display of a Matrix or Data Frame
> ### Aliases: prettyHead
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> x <- seq(from = 4, to = 6, length = 30)
> opt <- seq(4, 7, length = 100)
> tol <- rep(0.25, 100)
> h <- rep(20, 100)
> 
> ## simulate
> set.seed(1)
> y <- coenocline(x, responseModel = "gaussian",
+                 params = cbind(opt = opt, tol = tol, h = h),
+                 countModel = "poisson")
> 
> prettyHead(y)

   Sp1 Sp2 Sp3 Sp4 Sp5 Sp6 Sp7 Sp8 Sp9 Sp10 Sp11 Sp12 Sp13 Sp14 Sp15 Sp16 Sp17
1   17  18  19  27  12  23   8  10  15    9    6    7    4    4    4    4    4
2   25  21  24  18  20  21  16  18  14   14    9   11    8   10    4    5    6
3   22  18  22  15  19  14  18  12  14   20   12   17   17   12    5    8   11
4   15  18  16  12  14  20  18  15  17   28   16   10   16   16   15   15    9
5   15  12  12  24  14  21  20  16  18   24   21   11   21   20   15   11   10
6   10  10  12  11  17  17  15  20  19   24   27   21   24   14   24   26    9
7    5   6   9  11  12   8  11  14  13   11   24   18   20   23   16   18   26
8    4   6   2   5   6   6  14  10  16   11   14   23   14   26   27   14   24
9    6   2   2   4   2   5   4   5  12    5    4    8   10   17   16   18   18
10   0   0   0   1   2   4   4   4   8    7    8    9    9   11    9   18   11
:    :   :   :   :   :   :   :   :   :    :    :    :    :    :    :    :    :

Counts for 83 species not shown.

> 
> 
> 
> 
> cleanEx()
> nameEx("expand")
> ### * expand
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expand
> ### Title: An 'expand.grid'-like function that repeats sets of vectors for
> ###   every value in a reference vector.
> ### Aliases: expand
> ### Keywords: utilities
> 
> ### ** Examples
> 
> # Recreate Fig. 2 of Minchin (1987)
> # Parameters for each of 6 six species
> A0 <- c(5,4,7,5,9,8) * 10
> m <- c(25,85,10,60,45,60)
> r <- c(3,3,4,4,6,5) * 10
> alpha <- c(0.1,1,2,4,1.5,1)
> gamma <- c(0.1,1,2,4,0.5,4)
> # Gradient locations
> x <- 1:100
> 
> # expand parameter set
> pars <- expand(x, m = m, A0 = A0, r = r, alpha = alpha,
+                gamma = gamma)
> head(pars)
     x  m A0  r alpha gamma
[1,] 1 25 50 30   0.1   0.1
[2,] 2 25 50 30   0.1   0.1
[3,] 3 25 50 30   0.1   0.1
[4,] 4 25 50 30   0.1   0.1
[5,] 5 25 50 30   0.1   0.1
[6,] 6 25 50 30   0.1   0.1
> 
> 
> 
> cleanEx()
> nameEx("locations")
> ### * locations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: locations
> ### Title: Extract Gradient Locations
> ### Aliases: locations locations.default
> 
> ### ** Examples
> 
> 
> ## Poisson counts along a single gradient, Gaussian response
> ## =========================================================
> 
> x <- seq(from = 4, to = 6, length = 100)
> opt <- c(3.75, 4, 4.55, 5, 5.5) + 0.5
> tol <- rep(0.25, 5)
> h <- rep(20, 5)
> 
> ## simulate
> set.seed(1)
> y <- coenocline(x, responseModel = "gaussian",
+                 params = cbind(opt = opt, tol = tol, h = h),
+                 countModel = "poisson")
> head(locations(y))
[1] 4.000000 4.020202 4.040404 4.060606 4.080808 4.101010
> 
> 
> 
> cleanEx()
> nameEx("persp.coenocline")
> ### * persp.coenocline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: persp.coenocline
> ### Title: Perspective Plot of Species Simulations Along Gradients
> ### Aliases: persp.coenocline
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Poisson counts along two correlated gradients, Gaussian response
> ## ================================================================
> 
> set.seed(1)
> N <-  40
> x1 <- seq(from = 4, to = 6, length = N)
> opt1 <- seq(4, 6, length = 5)
> tol1 <- rep(0.25, 5)
> x2 <- seq(from = 2, to = 20, length = N)
> opt2 <- seq(2, 20, length = 5)
> tol2 <- rep(1, 5)
> h <- rep(30, 5)
> xy <- expand.grid(x = x1, y = x2)
> 
> set.seed(1)
> params <- list(px = list(opt = opt1, tol = tol1, h = h),
+                py = list(opt = opt2, tol = tol2))
> y <- coenocline(xy,
+                 responseModel = "gaussian",
+                 params = params,
+                 extraParams = list(corr = 0.5),
+                 countModel = "poisson")
> 
> ## perspective plot(s) of simulated counts
> layout(matrix(1:6, ncol = 3))
> op <- par(mar = rep(1, 4))
> persp(y)
> par(op)
> layout(1)
> 
> ## as before but now just expectations
> y <- coenocline(xy,
+                 responseModel = "gaussian",
+                 params = params,
+                 extraParams = list(corr = 0.5),
+                 countModel = "poisson",
+                 expectation = TRUE)
> 
> ## perspective plots of response curves
> layout(matrix(1:6, ncol = 3))
> op <- par(mar = rep(1, 4))
> persp(y)
> par(op)
> layout(1)
> 
> ## Same plots generated using the `plot` method
> layout(matrix(1:6, ncol = 3))
> op <- par(mar = rep(1, 4))
> persp(y)
> par(op)
> layout(1)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("plot.coenocline")
> ### * plot.coenocline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.coenocline
> ### Title: Plot species simulations along gradients
> ### Aliases: lines.coenocline plot.coenocline
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Poisson counts along a single gradient, Gaussian response
> ## =========================================================
> 
> x <- seq(from = 4, to = 6, length = 100)
> opt <- c(3.75, 4, 4.55, 5, 5.5) + 0.5
> tol <- rep(0.25, 5)
> h <- rep(20, 5)
> 
> ## simulate
> set.seed(1)
> y <- coenocline(x, responseModel = "gaussian",
+                 params = cbind(opt = opt, tol = tol, h = h),
+                 countModel = "poisson")
> head(y)
     [,1] [,2] [,3] [,4] [,5]
[1,]    9    3    0    0    0
[2,]   17    8    0    0    0
[3,]   18    4    0    0    0
[4,]   16    5    0    0    0
[5,]   21    5    0    0    0
[6,]   19    4    0    0    0
> 
> y <- coenocline(x, responseModel = "gaussian",
+                 params = cbind(opt = opt, tol = tol, h = h),
+                 countModel = "poisson",
+                 expectation = TRUE)
> plot(y, type = "l", lty = "solid")
> 
> 
> 
> cleanEx()
> nameEx("showParams")
> ### * showParams
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: showParams
> ### Title: List parameters of species response models
> ### Aliases: showParams
> 
> ### ** Examples
> 
> showParams("gaussian")
Species response model: Gaussian

Parameters:
[1] opt tol h* 

	Parameters marked with '*' are only supplied once
> 
> 
> 
> cleanEx()
> nameEx("simJamil")
> ### * simJamil
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simJamil
> ### Title: Simulate species abundance data following Jamil & ter Braak
> ###   (2013)
> ### Aliases: simJamil
> ### Keywords: datagen
> 
> ### ** Examples
> 
> set.seed(42)
> N <- 100   # Number of locations on gradient (samples)
> glen <- 4  # Gradient length
> grad <- sort(runif(N, -glen/2, glen/2)) # sample locations
> M <- 10    # Number of species
> sim <- simJamil(n = N, m = M, x = grad, gl = glen, randx = FALSE,
+                 randm = FALSE, expectation = TRUE)
> ## visualise the response curves
> matplot(grad, sim, type = "l", lty = "solid")
> 
> ## simulate binomial responses from those response curves
> sim <- simJamil(n = N, m = M, x = grad, gl = glen, randx = FALSE,
+                 randm = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("species-response")
> ### * species-response
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: species-response
> ### Title: Species response models for coenocline simulation
> ### Aliases: Beta Gaussian species-response
> ### Keywords: datagen
> 
> ### ** Examples
> 
> 
> # A simple example with a single species
> x <- seq(from = 4, to = 6, length = 100)
> px <- list(opt = 4.5, tol = 0.25, h = 20)
> G <- Gaussian(x, px = px)
> head(G)
[1] 2.706706 3.171116 3.691027 4.268216 4.903540 5.596765
> length(G)
[1] 100
> 
> # A more complex example with 6 species, which needs the parameters
> # repeating for each gradient location:
> 
> # Recreate Fig. 2 of Minchin (1987)
> # Parameters for each of 6 six species
> A0 <- c(5,4,7,5,9,8) * 10
> m <- c(25,85,10,60,45,60)
> r <- c(3,3,4,4,6,5) * 10
> alpha <- c(0.1,1,2,4,1.5,1)
> gamma <- c(0.1,1,2,4,0.5,4)
> # Gradient locations
> x <- 1:100
> 
> # expand parameter set
> pars <- expand(x, m = m, A0 = A0, r = r, alpha = alpha,
+ gamma = gamma)
> head(pars)
     x  m A0  r alpha gamma
[1,] 1 25 50 30   0.1   0.1
[2,] 2 25 50 30   0.1   0.1
[3,] 3 25 50 30   0.1   0.1
[4,] 4 25 50 30   0.1   0.1
[5,] 5 25 50 30   0.1   0.1
[6,] 6 25 50 30   0.1   0.1
> 
> xvec <- pars[, "x"]
> px <- as.list(data.frame(pars[, -1]))
> spprc <- Beta(xvec, px = px)
> matplot(matrix(spprc, ncol = 6), ## 6 species
+         type = "l", lty = "solid")
> 
> # Bivariate beta, single species
> xx <- 1:100
> yy <- 1:100
> xy <- expand.grid(x = xx, y = yy)
> parx <- expand(xy[, "x"], A0 = 50, m = 60, r = 40, alpha = 4, gamma = 4)
> pary <- expand(xy[, "y"], m = 60, r = 40, alpha = 4, gamma = 4)
> 
> x <- parx[,1]
> px <- as.list(as.list(data.frame(parx[, -1])))
> y <- pary[,1]
> py <- as.list(as.list(data.frame(pary[, -1])))
> 
> spprc <- Beta(x, y, px = px, py = py)
> persp(xx, yy, matrix(spprc, ncol = length(xx)))
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.079 0.014 1.093 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

% Generated by roxygen2 (4.0.1): do not edit by hand
\name{sim1dBeta}
\alias{sim1dBeta}
\title{Simulate Poisson counts along a single gradient}
\usage{
sim1dBeta(x, m, A0, r, alpha, gamma, count = c("poisson", "negbin"),
  expectation = FALSE, nb.alpha)
}
\arguments{
\item{x}{numeric; gradient locations.}

\item{m}{numeric; location on \code{x} of the peak (modal) abundance.}

\item{A0}{A0 numeric; maximum abundance at the mode \code{m}.}

\item{r}{numeric; range of occurence of species on gradient \code{x}.}

\item{alpha}{numeric; shape parameter of generalised beta function.}

\item{gamma}{numeric; shape parameter of generalised beta function.
Must be positive.}

\item{count}{character; which distribution to simulate counts from?
One of \code{"poisson"} or \code{"negbin"}.}

\item{expectation}{logical; should expectations (mean response) be
returned?}

\item{nb.alpha}{numeric; dispersion parameter for the negative binomial.}
}
\value{
a matrix of simulated counts.
}
\description{
Species abundances are generated from a generalized beta
function. The simple beta function is generalized to any range of
\code{x}, the gradient locations. Parameters specify the position
of the modal response (\code{m}), the maximum abundance at the mode
(\code{A0}), and the range of occurence of the species on the
gradient (\code{r}). In addition, two positive shape parameters,
\code{alpha} and \code{gamma} constrain the shape of the response.

If \code{expectation = TRUE} the mean response for the parameters
is returned. If \code{expectation = FALSE} counts are drawn randomly
from a Poisson or negative binomial distribution with mean (argument
\code{lamba}) given by the generalised Beta response.
}
\details{
Simulates species abundances along a single gradient with counts
generated from a generalised Beta response model using Poisson or
negative binomial random deviates.
}
\section{Note}{

When called with \code{expectation = FALSE} the function does not use
the pseudorandom number generator, but when called with the defaults
a single call to pseudorandom number generator is made.
}
\examples{
## Recreate Fig. 2 of Minchin (1987)
A0 <- c(5,4,7,5,9,8) * 10
m <- c(25,85,10,60,45,60)
r <- c(3,3,4,4,6,5) * 10
alpha <- c(0.1,1,2,4,1.5,1)
gamma <- c(0.1,1,2,4,0.5,4)
x <- 1:100

## Expectations
y <- sim1dBeta(x, m, A0, r, alpha, gamma, expectation = TRUE)
matplot(y, type = "l", lty = "solid")

## Poisson, simulated
set.seed(1)
y <- sim1dBeta(x, m, A0, r, alpha, gamma, count = "poisson")
matplot(y, type = "p", lty = "solid")

## Negative Binomial, simulated
set.seed(1)
y <- sim1dBeta(x, m, A0, r, alpha, gamma, count = "negbin",
               nb.alpha = 1)
matplot(y, type = "p", lty = "solid")
}
\author{
Gavin L. Simpson
}
\references{
Minchin P.R. (1987) Simulation of multidimensional
community patterns: towards a comprehensive model. \emph{Vegetatio}
\strong{71}, 145--156.
}

